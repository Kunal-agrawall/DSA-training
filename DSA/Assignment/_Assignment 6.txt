Ques1- Write a Python program to create a class representing a Circle. Include methods to calculate its area and perimeter.

Ques2- Write a Python program to create a person class. Include attributes like name, country and date of birth. Implement a method to determine the person's age

Ques3- Write a Python program to create a class that represents a shape. Include methods to calculate its area and perimeter. Implement subclasses for different shapes like circle, triangle, and square.

Ques4- Write a Python program to create a class representing a shopping cart. Include methods for adding and removing items, and calculating the total price.

Ques6- Write a Python program to create a class representing a bank. Include methods for managing customer accounts and transactions.

Ques7-:
Part 1-Create a Class with instance attributes.
Write a Python program to create a Vehicle class with max_speed and mileage instance attributes.
Part 2-Create a Vehicle class without any variables and methods
Part 3-Create a child class Bus that will inherit all of the variables and methods of the Vehicle class
Given:
class Vehicle:

    def __init__(self, name, max_speed, mileage):
        self.name = name
        self.max_speed = max_speed
        self.mileage = mileage

Part 4-Class Inheritance
Given:
Create a Bus class that inherits from the Vehicle class. Give the capacity argument of Bus.seating_capacity() a default value of 50.
Use the following code for your parent Vehicle class.

class Vehicle:
    def __init__(self, name, max_speed, mileage):
        self.name = name
        self.max_speed = max_speed
        self.mileage = mileage

    def seating_capacity(self, capacity):
        return f"The seating capacity of a {self.name} is {capacity} passengers"

Expected Output:

The seating capacity of a bus is 50 passengers.

Reference or problem solve through:
Inheritance in Python
Polymorphism in Python

Part 5- Define a property that must have the same value for every class instance (object)
Define a class attribute”color” with a default value white. I.e., Every Vehicle should be white.

Use the following code for this exercise.

class Vehicle:

    def __init__(self, name, max_speed, mileage):
        self.name = name
        self.max_speed = max_speed
        self.mileage = mileage

class Bus(Vehicle):
    pass

class Car(Vehicle):
    pass

Expected Output:

Color: White, Vehicle name: School Volvo, Speed: 180, Mileage: 12
Color: White, Vehicle name: Audi Q5, Speed: 240, Mileage: 18

Part 6- Class Inheritance
Given:
Create a Bus child class that inherits from the Vehicle class. The default fare charge of any vehicle is seating capacity * 100. If Vehicle is Bus instance, we need to add an extra 10% on full fare as a maintenance charge. So total fare for bus instance will become the final amount = total fare + 10% of the total fare.
Note: The bus seating capacity is 50. so the final fare amount should be 5500. You need to override the fare() method of a Vehicle class in Bus class.

Use the following code for your parent Vehicle class. We need to access the parent class from inside a method of a child class.

class Vehicle:
    def __init__(self, name, mileage, capacity):
        self.name = name
        self.mileage = mileage
        self.capacity = capacity

    def fare(self):
        return self.capacity * 100

class Bus(Vehicle):
    pass

School_bus = Bus("School Volvo", 12, 50)
print("Total Bus fare is:", School_bus.fare())

Expected Output:

Total Bus fare is: 5500.0

Part 7- Check type of an object
Write a program to determine which class a given Bus object belongs to.

Given:
class Vehicle:
    def __init__(self, name, mileage, capacity):
        self.name = name
        self.mileage = mileage
        self.capacity = capacity

class Bus(Vehicle):
    pass

School_bus = Bus("School Volvo", 12, 50)

Part 8- Determine if School_bus is also an instance of the Vehicle class
Given:

class Vehicle:
    def __init__(self, name, mileage, capacity):
        self.name = name
        self.mileage = mileage
        self.capacity = capacity

class Bus(Vehicle):
    pass

School_bus = Bus("School Volvo", 12, 50)
