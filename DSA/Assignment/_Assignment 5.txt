1. Sort a list of tuples by the first element in each tuple.
Sample List: [(5, 1), (2, 4), (3, 3), (1, 2)]

Expected Output:
[(1, 2), (2, 4), (3, 3), (5, 1)]
Explanation: The tuples are sorted by the first element. The sorted list is: [(1, 2), (2, 4), (3, 3), (5, 1)].

2. Sort a list of tuples by the sum of the elements in each tuple.
Sample List: [(1, 2), (2, 3), (3, 1), (4, 2)]

Expected Output:
[(1, 2), (3, 1), (4, 2), (2, 3)]
Explanation: The tuples are sorted based on the sum of their elements. Sum of elements in the tuples:

(1, 2) → 3
(2, 3) → 5
(3, 1) → 4
(4, 2) → 6
The sorted list by sum of elements: [(1, 2), (3, 1), (4, 2), (2, 3)].

3. Sort a list of tuples in reverse order based on the first element in each tuple.
Sample List: [(3, 4), (1, 2), (5, 1), (2, 3)]

Expected Output:

python
Copy
[(5, 1), (3, 4), (2, 3), (1, 2)]
Explanation: The tuples are sorted by the first element in reverse order: 5 > 3 > 2 > 1.

4. Group tuples by the first element in each tuple and sort the groups by the last element.
Sample List: [(2, 5), (1, 2), (2, 3), (1, 1), (2, 4)]

Expected Output:
[(1, 1), (1, 2), (2, 3), (2, 4), (2, 5)]
Explanation: First, the list is grouped by the first element (1 and 2), and then each group is sorted by the second element. The final result is [(1, 1), (1, 2), (2, 3), (2, 4), (2, 5)].

5. Sort a list of tuples by the length of each tuple.
Sample List: [(1, 2), (1, 2, 3), (4,), (2,)]

Expected Output:
[(4,), (2,), (1, 2), (1, 2, 3)]
Explanation: The tuples are sorted by their length: [(4,), (2,), (1, 2), (1, 2, 3)].

6. Sort a list of tuples by the first element, and in case of a tie, by the second element.
Sample List: [(1, 3), (1, 2), (2, 4), (2, 3)]

Expected Output:

python
Copy
[(1, 2), (1, 3), (2, 3), (2, 4)]
Explanation: The tuples are first sorted by the first element. If two tuples have the same first element, they are then sorted by the second element. The result is: [(1, 2), (1, 3), (2, 3), (2, 4)].

7. Find the tuple with the maximum sum of elements from a list of tuples.
Sample List: [(1, 2), (3, 1), (5, 2), (4, 3)]

Expected Output:
(5, 2)
Explanation: The sum of the elements in the tuples:

(1, 2) → 3
(3, 1) → 4
(5, 2) → 7
(4, 3) → 7
The tuple with the maximum sum is (5, 2) or (4, 3) (since both have the same sum of 7). In case of a tie, the tuple that appears first is chosen.

8. Find the tuple with the minimum first element in a list of tuples.
Sample List: [(4, 5), (2, 3), (1, 6), (3, 2)]

Expected Output:
(1, 6)
Explanation: The tuple with the minimum first element is (1, 6).

9. Sort a list of tuples by the second element, but if two second elements are equal, sort by the first element.
Sample List: [(3, 5), (1, 4), (2, 4), (4, 5)]

Expected Output:
[(1, 4), (2, 4), (3, 5), (4, 5)]
Explanation: The tuples are first sorted by the second element, and if the second elements are equal, they are sorted by the first element.

10. Create a new list of tuples where each tuple contains the sum of the elements from the original list of tuples. Sort it in increasing order of the sum.
Sample List: [(1, 3), (2, 1), (4, 2), (3, 1)]

Expected Output:
[(2, 1), (3, 1), (1, 3), (4, 2)]
Explanation: First, calculate the sum of elements in each tuple:

(1, 3) → 4
(2, 1) → 3
(4, 2) → 6
(3, 1) → 4
After sorting by sum: [(2, 1), (3, 1), (1, 3), (4, 2)].


-List Questions:
Merge Sorted Lists: Given two sorted lists, write a Python function to merge them into a single sorted list without using the sorted() function.
-Rotate List: Write a Python function that rotates a list to the right by k positions. (For example, [1, 2, 3, 4, 5] rotated by 2 positions becomes [4, 5, 1, 2, 3]).
-Find the Longest Increasing Subsequence: Given a list of integers, write a Python function that returns the longest increasing subsequence.
-Group Anagrams: Write a function that takes a list of strings and groups them into anagrams (i.e., strings that are anagrams of each other).
-Nested List Flattening: Write a Python program that flattens a nested list of lists into a single list (e.g., [[1, 2], [3, [4, 5]], 6] becomes [1, 2, 3, 4, 5, 6]).

Tuple Questions:
-Tuple Comparison: Write a function that compares two tuples element by element and returns True if all elements are equal, otherwise False.
-Find the Second Largest Element: Write a Python function that returns the second largest element in a tuple without converting it to a list.
-Tuple to Dictionary: Write a function that takes a list of tuples where each tuple contains two elements (key, value), and converts them into a dictionary.
-Count Occurrences in Tuple: Given a tuple of elements, write a Python function that counts the frequency of each element using a dictionary and returns it.

Set Questions:
-Find Symmetric Difference: Write a Python function that takes two sets and returns their symmetric difference (elements that are in one set or the other, but not both).
-Set Operations on Multiple Sets: Given multiple sets, write a Python program to find the union, intersection, and difference for all the sets.
-Check for Subset and Superset: Write a Python function that takes two sets and checks if one is a subset or superset of the other.
-Set of Frozensets: Create a set that contains frozensets. Perform set operations (e.g., union, intersection) on it.

Mixed Questions (List, Tuple, Set):
-Remove Elements from List and Set: Given a list and a set, write a function that removes the elements from the list that exist in the set, without modifying the original set.
-Find the Intersection of a List of Tuples: Given a list of tuples (each tuple has two elements), write a Python function to find the intersection of the first elements of all the tuples and return the result as a set.
-Merge List of Sets: Write a function that takes a list of sets and merges them into one set, removing any duplicate elements.
-List and Tuple Frequency: Given a list and a tuple, write a Python program to count how many times the elements from the tuple appear in the list.
